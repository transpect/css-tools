css      ::= S* ( (  rule | simple_atrule | fontquery | import | mediaquery | pagequery | COMMENT) S* )*
simple_atrule  ::= ('@charset'|'@namespace') S+ QUOTED_STRING S* ';' 
fontquery ::= '@font-face' S* '{' S* (COMMENT? S* declaration ( S* ';' S* declaration?)* ';'? S*)* COMMENT* S* '}'
import ::= '@import' S+ ( QUOTED_STRING | URL ) S* ';'
rule     ::= selectors_group S* '{' S* (COMMENT* S* declaration ( S* ';' S* declaration?)* ';'? S*)* COMMENT* S* '}'
mediaquery ::= mediarule S* '{' ( S* COMMENT* S* (rule | pagequery | COMMENT) )* S* '}'
pagequery ::= pagerule S* '{' (S* COMMENT* S*(areaquery | footnotequery | declaration ';'|COMMENT) )* S* '}'
areaquery ::= '@'arearule S* '{' S* (COMMENT* S* declaration ( S* ';' S* declaration?)* ';'? S?)* COMMENT* S* '}'
footnotequery ::= '@footnote' S* '{' S* (COMMENT? S* declaration ( S* ';' S* declaration?)* ';'? S*)* COMMENT* S* '}'
declaration ::=  (property S* ':' (property ':')* S* values) 
selectors_group
         ::= selector ( COMMENT? COMMA S* selector )*  
selector ::= simple_selector_sequence ( combinator simple_selector_sequence )*
combinator
         ::= PLUS S*
           | GREATER S*
           | TILDE S*
           | S+
simple_selector_sequence
         ::= ( type_selector | universal ) ( HASH | class | attrib | pseudo | negation | atrule )*
           | ( HASH | class | attrib | pseudo | negation | atrule )+
type_selector
         ::= namespace_prefix? element_name
namespace_prefix
         ::= ( IDENT | '*' )? '|'
element_name
         ::= IDENT
universal
         ::= namespace_prefix? '*'
class    ::= '.' IDENT
mediarule ::= '@media' S media_query_list
media_query_list ::= media_query S? (COMMA S? media_query)*
media_query ::= (
                    (notonly S)? media_type (S and S media_feature_expression)*
                  | media_feature_expression (S and S media_feature_expression)*
                ) S*
notonly ::= (not | only)
and ::= 'and'
not ::= 'not'
only ::= 'only'
media_type ::= ('all'|'print'|'screen'|'amzn-mobi'|'amzn-kf8'|'amzn-mobi7')
media_feature_expression ::= '(' S? media_feature_name (S? ':' S? mediaquery_value)? S? ')'
media_feature_name ::= IDENT
pagerule ::= '@page' S* (pageclass | pagename)?
pagename ::= IDENT
pageclass ::= ':' ('first'|'blank'|'left'|'right')
arearule::= ('bottom-left-corner'|'bottom-left'|'bottom-center'|'bottom-right'|'bottom-right-corner'|'top-left-corner'|'top-left'|'top-center'|'top-right'|'top-right-corner'|'left-top'|'left-middle'|'left-right'|'right-top'|'right-middle'|'right-bottom') 
atrule  ::= '@' IDENT
attrib   ::= '[' S* namespace_prefix? IDENT S* ( ( PREFIXMATCH  | SUFFIXMATCH | SUBSTRINGMATCH | '=' | INCLUDES | DASHMATCH ) S* ( IDENT | QUOTED_STRING ) S* )? ']'
pseudo   ::= ':' ':'? ( IDENT | functional_pseudo )
functional_pseudo
         ::= FUNCTION S* expression? ')'
property ::= ( QUOTED_STRING | IDENT )
values ::= value (S value | S* '/' S* value )* ( S* COMMA S* value (S value | '/' value )* )* important?
value ::= ( URL | ATTR | PLUS | HEX | PERCENTAGE | '-' | DIMENSION | NUMBER  | QUOTED_STRING | IDENT | functional_pseudo)
mediaquery_value ::= ( value | NUMBER ('/' NUMBER)? )
expression     ::= ( ( PLUS | PERCENTAGE | URL | ATTR | HEX | '-' | DIMENSION  | NUMBER | QUOTED_STRING | IDENT | COMMA | functional_pseudo ) S* )+
negation ::= NOT S* negation_arg S* ')'
negation_arg
         ::= type_selector
           | universal
           | HASH
           | class
           | attrib
           | pseudo
           
COMMENT ::=  '/*' CommentContents '*/' 
URL       ::= 'url(' ( QUOTED_STRING | S* BARE_URL S* ) ')'
ATTR  ::= 'attr('  IDENT  ')'
QUOTED_STRING   ::= ('"' STRING_CONTENT1 '"' | "'" STRING_CONTENT2 "'")
BARE_URL ::= BARE_URL_CHARS

<?TOKENS?>
BARE_URL_CHAR
           ::= #x0021
            | [#x0023-#x0026]
            | [#x002A-#xD7FF]
            | [#xE000-#xFFFD]
            | [#x10000-#x10FFFF]
BARE_URL_CHARS ::= (BARE_URL_CHAR)+
important ::= S* '!' S* 'important'
ident    ::= [-]? nmstart nmchar* 
name     ::= nmchar+
nmstart  ::= [_a-zA-Z]
           | nonascii
           | escape
nonascii ::= [^#x0000-#x007F]
unicode  ::= '\' one-to-six-hex-digits ( #x000D #x000A | [ #x000A#x000D#x0009#x000C] )?
escape   ::= unicode
           | '\' [^0-9a-f#x000A#x000D#x000C]
nmchar   ::= [_a-zA-Z0-9#x2D]
           | nonascii
           | escape
num      ::= [0-9]+
           | [0-9]* '.' [0-9]+
nl       ::= #x000A
           | #x000D #x000A
           | #x000D
           | #x000C
STRING_CONTENT1 ::= ( [^#x000A#x000D#x000C\"] | '\' nl | nonascii | escape )*
STRING_CONTENT2 ::= ( [^#x000A#x000D#x000C\'] | '\' nl | nonascii | escape )*
w        ::= [ #x0009#x000D#x000A#x000C]*
N        ::= 'n'
           | '\' zero-to-four-zeroes ( '4e' | '6e' ) ( #x000D #x000A | [ #x0009#x000D#x000A#x000C] )?
           | '\n'
O        ::= 'o'
           | '\' zero-to-four-zeroes ( '4f' | '6f' ) ( #x000D #x000A | [ #x0009#x000D#x000A#x000C] )?
           | '\o'
T        ::= 't'
           | '\' zero-to-four-zeroes ( '54' | '74' ) ( #x000D #x000A | [ #x0009#x000D#x000A#x000C] )?
           | '\t'
S        ::= [ #x0009#x000D#x000A#x000C]+
INCLUDES ::= '~='
DASHMATCH
         ::= '|='
PREFIXMATCH
         ::= '^='
SUFFIXMATCH
         ::= '$='
SUBSTRINGMATCH
         ::= '*='
IDENT    ::= ident
FUNCTION ::= (ident - ('attr'|'url')) '('
NUMBER   ::= '-'?num
HASH     ::= '#' name
HEX      ::= '#' one-to-six-hex-digits
PERCENTAGE ::= '-'? num '%'
PLUS     ::= w '+'
GREATER  ::= w '>'
COMMA    ::= w ','
TILDE    ::= w '~'
NOT      ::= ':' N O T '('
DIMENSION ::= '-'?num ( 'ch' | 'cm' | 'em' | 'ex' | 'fr' | 'in' | 'mm' | 'pc' | 'pt' | 'px' | 'Q' | 'rem' | 's' | 'vh' | 'vmax' | 'vmin' | 'vw' | 'dpi' )
Char     ::= #x0009
           | #x000A
           | #x000D
           | [#x0020-#xD7FF]
           | [#xE000-#xFFFD]
           | [#x10000-#x10FFFF]
CommentContents
          ::=( ( Char+ - ( Char* ( '/*' | '*/' ) Char* ) ) - ( Char* '/' ) ) &'*'
            | ( Char+ - ( Char* ( '/*' | '*/' ) Char* ) ) &'*/'
one-to-six-hex-digits
         ::= [0-9a-fA-F]
           | [0-9a-fA-F] [0-9a-fA-F]
           | [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]
           | [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]
           | [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]
           | [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]
zero-to-four-zeroes
         ::=
           | '0'
           | '00'
           | '000'
           | '0000'